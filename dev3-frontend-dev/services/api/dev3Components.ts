/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useDev3Context, Dev3Context } from "./dev3Context";
import type * as Fetcher from "./dev3Fetcher";
import { dev3Fetch } from "./dev3Fetcher";
import type * as Schemas from "./dev3Schemas";

export type ProjectControllerCreateError = Fetcher.ErrorWrapper<undefined>;

export type ProjectControllerCreateVariables = {
  body: Schemas.CreateProjectDto;
} & Dev3Context["fetcherOptions"];

export const fetchProjectControllerCreate = (
  variables: ProjectControllerCreateVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    Schemas.Project,
    ProjectControllerCreateError,
    Schemas.CreateProjectDto,
    {},
    {},
    {}
  >({ url: "/api/v1/project", method: "post", ...variables, signal });

export const useProjectControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Project,
      ProjectControllerCreateError,
      ProjectControllerCreateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDev3Context();
  return reactQuery.useMutation<
    Schemas.Project,
    ProjectControllerCreateError,
    ProjectControllerCreateVariables
  >(
    (variables: ProjectControllerCreateVariables) =>
      fetchProjectControllerCreate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ProjectControllerFindAllQueryParams = {
  offset?: number;
  limit?: number;
  slug?: string;
  name?: string;
};

export type ProjectControllerFindAllError = Fetcher.ErrorWrapper<undefined>;

export type ProjectControllerFindAllResponse = {
  total: number;
  limit: number;
  offset: number;
  count: number;
  results: Schemas.Project[];
};

export type ProjectControllerFindAllVariables = {
  queryParams?: ProjectControllerFindAllQueryParams;
} & Dev3Context["fetcherOptions"];

export const fetchProjectControllerFindAll = (
  variables: ProjectControllerFindAllVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    ProjectControllerFindAllResponse,
    ProjectControllerFindAllError,
    undefined,
    {},
    ProjectControllerFindAllQueryParams,
    {}
  >({ url: "/api/v1/project", method: "get", ...variables, signal });

export const useProjectControllerFindAll = <
  TData = ProjectControllerFindAllResponse
>(
  variables: ProjectControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProjectControllerFindAllResponse,
      ProjectControllerFindAllError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useDev3Context(options);
  return reactQuery.useQuery<
    ProjectControllerFindAllResponse,
    ProjectControllerFindAllError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/project",
      operationId: "projectControllerFindAll",
      variables,
    }),
    ({ signal }) =>
      fetchProjectControllerFindAll(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProjectControllerFindByIdPathParams = {
  id: string;
};

export type ProjectControllerFindByIdError = Fetcher.ErrorWrapper<undefined>;

export type ProjectControllerFindByIdVariables = {
  pathParams: ProjectControllerFindByIdPathParams;
} & Dev3Context["fetcherOptions"];

export const fetchProjectControllerFindById = (
  variables: ProjectControllerFindByIdVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    Schemas.Project,
    ProjectControllerFindByIdError,
    undefined,
    {},
    {},
    ProjectControllerFindByIdPathParams
  >({ url: "/api/v1/project/{id}", method: "get", ...variables, signal });

export const useProjectControllerFindById = <TData = Schemas.Project>(
  variables: ProjectControllerFindByIdVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Project,
      ProjectControllerFindByIdError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useDev3Context(options);
  return reactQuery.useQuery<
    Schemas.Project,
    ProjectControllerFindByIdError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/project/{id}",
      operationId: "projectControllerFindById",
      variables,
    }),
    ({ signal }) =>
      fetchProjectControllerFindById(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProjectControllerUpdatePathParams = {
  id: string;
};

export type ProjectControllerUpdateError = Fetcher.ErrorWrapper<undefined>;

export type ProjectControllerUpdateVariables = {
  body?: Schemas.UpdateProjectDto;
  pathParams: ProjectControllerUpdatePathParams;
} & Dev3Context["fetcherOptions"];

export const fetchProjectControllerUpdate = (
  variables: ProjectControllerUpdateVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    Schemas.Project,
    ProjectControllerUpdateError,
    Schemas.UpdateProjectDto,
    {},
    {},
    ProjectControllerUpdatePathParams
  >({ url: "/api/v1/project/{id}", method: "patch", ...variables, signal });

export const useProjectControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Project,
      ProjectControllerUpdateError,
      ProjectControllerUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDev3Context();
  return reactQuery.useMutation<
    Schemas.Project,
    ProjectControllerUpdateError,
    ProjectControllerUpdateVariables
  >(
    (variables: ProjectControllerUpdateVariables) =>
      fetchProjectControllerUpdate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ProjectControllerFindBySlugPathParams = {
  slug: string;
};

export type ProjectControllerFindBySlugError = Fetcher.ErrorWrapper<undefined>;

export type ProjectControllerFindBySlugVariables = {
  pathParams: ProjectControllerFindBySlugPathParams;
} & Dev3Context["fetcherOptions"];

export const fetchProjectControllerFindBySlug = (
  variables: ProjectControllerFindBySlugVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    Schemas.ProjectDto,
    ProjectControllerFindBySlugError,
    undefined,
    {},
    {},
    ProjectControllerFindBySlugPathParams
  >({
    url: "/api/v1/project/slug/{slug}",
    method: "get",
    ...variables,
    signal,
  });

export const useProjectControllerFindBySlug = <TData = Schemas.ProjectDto>(
  variables: ProjectControllerFindBySlugVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ProjectDto,
      ProjectControllerFindBySlugError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useDev3Context(options);
  return reactQuery.useQuery<
    Schemas.ProjectDto,
    ProjectControllerFindBySlugError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/project/slug/{slug}",
      operationId: "projectControllerFindBySlug",
      variables,
    }),
    ({ signal }) =>
      fetchProjectControllerFindBySlug(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AuthControllerNearLoginError = Fetcher.ErrorWrapper<undefined>;

export type AuthControllerNearLoginVariables = {
  body: Schemas.NearLoginRequestDto;
} & Dev3Context["fetcherOptions"];

export const fetchAuthControllerNearLogin = (
  variables: AuthControllerNearLoginVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    Schemas.NearLoginResponseDto,
    AuthControllerNearLoginError,
    Schemas.NearLoginRequestDto,
    {},
    {},
    {}
  >({ url: "/api/v1/auth/near", method: "post", ...variables, signal });

export const useAuthControllerNearLogin = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.NearLoginResponseDto,
      AuthControllerNearLoginError,
      AuthControllerNearLoginVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDev3Context();
  return reactQuery.useMutation<
    Schemas.NearLoginResponseDto,
    AuthControllerNearLoginError,
    AuthControllerNearLoginVariables
  >(
    (variables: AuthControllerNearLoginVariables) =>
      fetchAuthControllerNearLogin({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UserControllerFindMeError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerFindMeVariables = Dev3Context["fetcherOptions"];

export const fetchUserControllerFindMe = (
  variables: UserControllerFindMeVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<Schemas.User, UserControllerFindMeError, undefined, {}, {}, {}>({
    url: "/api/v1/user/me",
    method: "get",
    ...variables,
    signal,
  });

export const useUserControllerFindMe = <TData = Schemas.User>(
  variables: UserControllerFindMeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.User, UserControllerFindMeError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useDev3Context(options);
  return reactQuery.useQuery<Schemas.User, UserControllerFindMeError, TData>(
    queryKeyFn({
      path: "/api/v1/user/me",
      operationId: "userControllerFindMe",
      variables,
    }),
    ({ signal }) =>
      fetchUserControllerFindMe({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ApiKeyControllerCreateError = Fetcher.ErrorWrapper<undefined>;

export type ApiKeyControllerCreateVariables = {
  body: Schemas.CreateApiKeyDto;
} & Dev3Context["fetcherOptions"];

export const fetchApiKeyControllerCreate = (
  variables: ApiKeyControllerCreateVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    Schemas.ApiKeyDto,
    ApiKeyControllerCreateError,
    Schemas.CreateApiKeyDto,
    {},
    {},
    {}
  >({ url: "/api/v1/api-key", method: "post", ...variables, signal });

export const useApiKeyControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ApiKeyDto,
      ApiKeyControllerCreateError,
      ApiKeyControllerCreateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDev3Context();
  return reactQuery.useMutation<
    Schemas.ApiKeyDto,
    ApiKeyControllerCreateError,
    ApiKeyControllerCreateVariables
  >(
    (variables: ApiKeyControllerCreateVariables) =>
      fetchApiKeyControllerCreate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ApiKeyControllerFindAllQueryParams = {
  offset?: number;
  limit?: number;
  project_id?: string;
  api_key?: string;
};

export type ApiKeyControllerFindAllError = Fetcher.ErrorWrapper<undefined>;

export type ApiKeyControllerFindAllVariables = {
  queryParams?: ApiKeyControllerFindAllQueryParams;
} & Dev3Context["fetcherOptions"];

export const fetchApiKeyControllerFindAll = (
  variables: ApiKeyControllerFindAllVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    Schemas.PaginatedDto,
    ApiKeyControllerFindAllError,
    undefined,
    {},
    ApiKeyControllerFindAllQueryParams,
    {}
  >({ url: "/api/v1/api-key", method: "get", ...variables, signal });

export const useApiKeyControllerFindAll = <TData = Schemas.PaginatedDto>(
  variables: ApiKeyControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PaginatedDto,
      ApiKeyControllerFindAllError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useDev3Context(options);
  return reactQuery.useQuery<
    Schemas.PaginatedDto,
    ApiKeyControllerFindAllError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/api-key",
      operationId: "apiKeyControllerFindAll",
      variables,
    }),
    ({ signal }) =>
      fetchApiKeyControllerFindAll({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ApiKeyControllerFindOnePathParams = {
  projectId: string;
};

export type ApiKeyControllerFindOneError = Fetcher.ErrorWrapper<undefined>;

export type ApiKeyControllerFindOneVariables = {
  pathParams: ApiKeyControllerFindOnePathParams;
} & Dev3Context["fetcherOptions"];

export const fetchApiKeyControllerFindOne = (
  variables: ApiKeyControllerFindOneVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    Schemas.ApiKeyDto,
    ApiKeyControllerFindOneError,
    undefined,
    {},
    {},
    ApiKeyControllerFindOnePathParams
  >({
    url: "/api/v1/api-key/{projectId}",
    method: "get",
    ...variables,
    signal,
  });

export const useApiKeyControllerFindOne = <TData = Schemas.ApiKeyDto>(
  variables: ApiKeyControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ApiKeyDto,
      ApiKeyControllerFindOneError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useDev3Context(options);
  return reactQuery.useQuery<
    Schemas.ApiKeyDto,
    ApiKeyControllerFindOneError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/api-key/{projectId}",
      operationId: "apiKeyControllerFindOne",
      variables,
    }),
    ({ signal }) =>
      fetchApiKeyControllerFindOne({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ApiKeyControllerIsValidPathParams = {
  apiKey: string;
};

export type ApiKeyControllerIsValidError = Fetcher.ErrorWrapper<undefined>;

export type ApiKeyControllerIsValidVariables = {
  pathParams: ApiKeyControllerIsValidPathParams;
} & Dev3Context["fetcherOptions"];

export const fetchApiKeyControllerIsValid = (
  variables: ApiKeyControllerIsValidVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    Schemas.ApiKeyDto,
    ApiKeyControllerIsValidError,
    undefined,
    {},
    {},
    ApiKeyControllerIsValidPathParams
  >({
    url: "/api/v1/api-key/is-valid/{apiKey}",
    method: "get",
    ...variables,
    signal,
  });

export const useApiKeyControllerIsValid = <TData = Schemas.ApiKeyDto>(
  variables: ApiKeyControllerIsValidVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ApiKeyDto,
      ApiKeyControllerIsValidError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useDev3Context(options);
  return reactQuery.useQuery<
    Schemas.ApiKeyDto,
    ApiKeyControllerIsValidError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/api-key/is-valid/{apiKey}",
      operationId: "apiKeyControllerIsValid",
      variables,
    }),
    ({ signal }) =>
      fetchApiKeyControllerIsValid({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ApiKeyControllerRegeneratePathParams = {
  apiKey: string;
};

export type ApiKeyControllerRegenerateError = Fetcher.ErrorWrapper<undefined>;

export type ApiKeyControllerRegenerateVariables = {
  body: Schemas.RegenerateApiKeyDto;
  pathParams: ApiKeyControllerRegeneratePathParams;
} & Dev3Context["fetcherOptions"];

export const fetchApiKeyControllerRegenerate = (
  variables: ApiKeyControllerRegenerateVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    Schemas.ApiKeyDto,
    ApiKeyControllerRegenerateError,
    Schemas.RegenerateApiKeyDto,
    {},
    {},
    ApiKeyControllerRegeneratePathParams
  >({
    url: "/api/v1/api-key/regenerate/{apiKey}",
    method: "patch",
    ...variables,
    signal,
  });

export const useApiKeyControllerRegenerate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ApiKeyDto,
      ApiKeyControllerRegenerateError,
      ApiKeyControllerRegenerateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDev3Context();
  return reactQuery.useMutation<
    Schemas.ApiKeyDto,
    ApiKeyControllerRegenerateError,
    ApiKeyControllerRegenerateVariables
  >(
    (variables: ApiKeyControllerRegenerateVariables) =>
      fetchApiKeyControllerRegenerate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ApiKeyControllerRevokePathParams = {
  apiKey: string;
};

export type ApiKeyControllerRevokeError = Fetcher.ErrorWrapper<undefined>;

export type ApiKeyControllerRevokeVariables = {
  body: Schemas.RevokeApiKeyDto;
  pathParams: ApiKeyControllerRevokePathParams;
} & Dev3Context["fetcherOptions"];

export const fetchApiKeyControllerRevoke = (
  variables: ApiKeyControllerRevokeVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    Schemas.ApiKeyDto,
    ApiKeyControllerRevokeError,
    Schemas.RevokeApiKeyDto,
    {},
    {},
    ApiKeyControllerRevokePathParams
  >({
    url: "/api/v1/api-key/revoke/{apiKey}",
    method: "patch",
    ...variables,
    signal,
  });

export const useApiKeyControllerRevoke = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ApiKeyDto,
      ApiKeyControllerRevokeError,
      ApiKeyControllerRevokeVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDev3Context();
  return reactQuery.useMutation<
    Schemas.ApiKeyDto,
    ApiKeyControllerRevokeError,
    ApiKeyControllerRevokeVariables
  >(
    (variables: ApiKeyControllerRevokeVariables) =>
      fetchApiKeyControllerRevoke({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ApiKeyControllerRemovePathParams = {
  id: string;
};

export type ApiKeyControllerRemoveError = Fetcher.ErrorWrapper<undefined>;

export type ApiKeyControllerRemoveVariables = {
  pathParams: ApiKeyControllerRemovePathParams;
} & Dev3Context["fetcherOptions"];

export const fetchApiKeyControllerRemove = (
  variables: ApiKeyControllerRemoveVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    Schemas.ApiKey,
    ApiKeyControllerRemoveError,
    undefined,
    {},
    {},
    ApiKeyControllerRemovePathParams
  >({ url: "/api/v1/api-key/{id}", method: "delete", ...variables, signal });

export const useApiKeyControllerRemove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ApiKey,
      ApiKeyControllerRemoveError,
      ApiKeyControllerRemoveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDev3Context();
  return reactQuery.useMutation<
    Schemas.ApiKey,
    ApiKeyControllerRemoveError,
    ApiKeyControllerRemoveVariables
  >(
    (variables: ApiKeyControllerRemoveVariables) =>
      fetchApiKeyControllerRemove({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AddressControllerCreateError = Fetcher.ErrorWrapper<undefined>;

export type AddressControllerCreateVariables = {
  body: Schemas.CreateAddressDto;
} & Dev3Context["fetcherOptions"];

export const fetchAddressControllerCreate = (
  variables: AddressControllerCreateVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    Schemas.Address,
    AddressControllerCreateError,
    Schemas.CreateAddressDto,
    {},
    {},
    {}
  >({ url: "/api/v1/address", method: "post", ...variables, signal });

export const useAddressControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Address,
      AddressControllerCreateError,
      AddressControllerCreateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDev3Context();
  return reactQuery.useMutation<
    Schemas.Address,
    AddressControllerCreateError,
    AddressControllerCreateVariables
  >(
    (variables: AddressControllerCreateVariables) =>
      fetchAddressControllerCreate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AddressControllerFindAllQueryParams = {
  offset?: number;
  limit?: number;
  alias?: string;
};

export type AddressControllerFindAllError = Fetcher.ErrorWrapper<undefined>;

export type AddressControllerFindAllResponse = {
  total: number;
  limit: number;
  offset: number;
  count: number;
  results: Schemas.Address[];
};

export type AddressControllerFindAllVariables = {
  queryParams?: AddressControllerFindAllQueryParams;
} & Dev3Context["fetcherOptions"];

export const fetchAddressControllerFindAll = (
  variables: AddressControllerFindAllVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    AddressControllerFindAllResponse,
    AddressControllerFindAllError,
    undefined,
    {},
    AddressControllerFindAllQueryParams,
    {}
  >({ url: "/api/v1/address", method: "get", ...variables, signal });

export const useAddressControllerFindAll = <
  TData = AddressControllerFindAllResponse
>(
  variables: AddressControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AddressControllerFindAllResponse,
      AddressControllerFindAllError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useDev3Context(options);
  return reactQuery.useQuery<
    AddressControllerFindAllResponse,
    AddressControllerFindAllError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/address",
      operationId: "addressControllerFindAll",
      variables,
    }),
    ({ signal }) =>
      fetchAddressControllerFindAll(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AddressControllerFindOnePathParams = {
  id: string;
};

export type AddressControllerFindOneError = Fetcher.ErrorWrapper<undefined>;

export type AddressControllerFindOneVariables = {
  pathParams: AddressControllerFindOnePathParams;
} & Dev3Context["fetcherOptions"];

export const fetchAddressControllerFindOne = (
  variables: AddressControllerFindOneVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    Schemas.Address,
    AddressControllerFindOneError,
    undefined,
    {},
    {},
    AddressControllerFindOnePathParams
  >({ url: "/api/v1/address/{id}", method: "get", ...variables, signal });

export const useAddressControllerFindOne = <TData = Schemas.Address>(
  variables: AddressControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Address,
      AddressControllerFindOneError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useDev3Context(options);
  return reactQuery.useQuery<
    Schemas.Address,
    AddressControllerFindOneError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/address/{id}",
      operationId: "addressControllerFindOne",
      variables,
    }),
    ({ signal }) =>
      fetchAddressControllerFindOne(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AddressControllerUpdatePathParams = {
  id: string;
};

export type AddressControllerUpdateError = Fetcher.ErrorWrapper<undefined>;

export type AddressControllerUpdateVariables = {
  body?: Schemas.UpdateAddressDto;
  pathParams: AddressControllerUpdatePathParams;
} & Dev3Context["fetcherOptions"];

export const fetchAddressControllerUpdate = (
  variables: AddressControllerUpdateVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    Schemas.Address,
    AddressControllerUpdateError,
    Schemas.UpdateAddressDto,
    {},
    {},
    AddressControllerUpdatePathParams
  >({ url: "/api/v1/address/{id}", method: "patch", ...variables, signal });

export const useAddressControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Address,
      AddressControllerUpdateError,
      AddressControllerUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDev3Context();
  return reactQuery.useMutation<
    Schemas.Address,
    AddressControllerUpdateError,
    AddressControllerUpdateVariables
  >(
    (variables: AddressControllerUpdateVariables) =>
      fetchAddressControllerUpdate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AddressControllerRemovePathParams = {
  id: string;
};

export type AddressControllerRemoveError = Fetcher.ErrorWrapper<undefined>;

export type AddressControllerRemoveVariables = {
  pathParams: AddressControllerRemovePathParams;
} & Dev3Context["fetcherOptions"];

export const fetchAddressControllerRemove = (
  variables: AddressControllerRemoveVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    Schemas.Address,
    AddressControllerRemoveError,
    undefined,
    {},
    {},
    AddressControllerRemovePathParams
  >({ url: "/api/v1/address/{id}", method: "delete", ...variables, signal });

export const useAddressControllerRemove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Address,
      AddressControllerRemoveError,
      AddressControllerRemoveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDev3Context();
  return reactQuery.useMutation<
    Schemas.Address,
    AddressControllerRemoveError,
    AddressControllerRemoveVariables
  >(
    (variables: AddressControllerRemoveVariables) =>
      fetchAddressControllerRemove({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ContractControllerFindAllQueryParams = {
  offset?: number;
  limit?: number;
  name?: string;
  isAudited?: boolean;
};

export type ContractControllerFindAllError = Fetcher.ErrorWrapper<undefined>;

export type ContractControllerFindAllVariables = {
  queryParams?: ContractControllerFindAllQueryParams;
} & Dev3Context["fetcherOptions"];

export const fetchContractControllerFindAll = (
  variables: ContractControllerFindAllVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    Schemas.PaginatedDto,
    ContractControllerFindAllError,
    undefined,
    {},
    ContractControllerFindAllQueryParams,
    {}
  >({ url: "/api/v1/contract-template", method: "get", ...variables, signal });

export const useContractControllerFindAll = <TData = Schemas.PaginatedDto>(
  variables: ContractControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PaginatedDto,
      ContractControllerFindAllError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useDev3Context(options);
  return reactQuery.useQuery<
    Schemas.PaginatedDto,
    ContractControllerFindAllError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/contract-template",
      operationId: "contractControllerFindAll",
      variables,
    }),
    ({ signal }) =>
      fetchContractControllerFindAll(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ContractControllerUpdateContractsError =
  Fetcher.ErrorWrapper<undefined>;

export type ContractControllerUpdateContractsVariables =
  Dev3Context["fetcherOptions"];

export const fetchContractControllerUpdateContracts = (
  variables: ContractControllerUpdateContractsVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    undefined,
    ContractControllerUpdateContractsError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/api/v1/contract-template/update-contracts",
    method: "post",
    ...variables,
    signal,
  });

export const useContractControllerUpdateContracts = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ContractControllerUpdateContractsError,
      ContractControllerUpdateContractsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDev3Context();
  return reactQuery.useMutation<
    undefined,
    ContractControllerUpdateContractsError,
    ContractControllerUpdateContractsVariables
  >(
    (variables: ContractControllerUpdateContractsVariables) =>
      fetchContractControllerUpdateContracts({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type DeployedContractControllerCreateError =
  Fetcher.ErrorWrapper<undefined>;

export type DeployedContractControllerCreateVariables = {
  body: Schemas.CreateDeployedContractDto;
} & Dev3Context["fetcherOptions"];

export const fetchDeployedContractControllerCreate = (
  variables: DeployedContractControllerCreateVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    Schemas.DeployedContract,
    DeployedContractControllerCreateError,
    Schemas.CreateDeployedContractDto,
    {},
    {},
    {}
  >({ url: "/api/v1/deployed-contract", method: "post", ...variables, signal });

export const useDeployedContractControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.DeployedContract,
      DeployedContractControllerCreateError,
      DeployedContractControllerCreateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDev3Context();
  return reactQuery.useMutation<
    Schemas.DeployedContract,
    DeployedContractControllerCreateError,
    DeployedContractControllerCreateVariables
  >(
    (variables: DeployedContractControllerCreateVariables) =>
      fetchDeployedContractControllerCreate({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type DeployedContractControllerFindAllQueryParams = {
  project_id?: string;
  offset?: number;
  limit?: number;
  alias?: string;
  status?: "Pending" | "Deployed" | "Failure";
  tags?: string[];
  contract_template_id?: void;
};

export type DeployedContractControllerFindAllError =
  Fetcher.ErrorWrapper<undefined>;

export type DeployedContractControllerFindAllResponse = {
  total: number;
  limit: number;
  offset: number;
  count: number;
  results: Schemas.DeployedContract[];
};

export type DeployedContractControllerFindAllVariables = {
  queryParams?: DeployedContractControllerFindAllQueryParams;
} & Dev3Context["fetcherOptions"];

export const fetchDeployedContractControllerFindAll = (
  variables: DeployedContractControllerFindAllVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    DeployedContractControllerFindAllResponse,
    DeployedContractControllerFindAllError,
    undefined,
    {},
    DeployedContractControllerFindAllQueryParams,
    {}
  >({ url: "/api/v1/deployed-contract", method: "get", ...variables, signal });

export const useDeployedContractControllerFindAll = <
  TData = DeployedContractControllerFindAllResponse
>(
  variables: DeployedContractControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      DeployedContractControllerFindAllResponse,
      DeployedContractControllerFindAllError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useDev3Context(options);
  return reactQuery.useQuery<
    DeployedContractControllerFindAllResponse,
    DeployedContractControllerFindAllError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/deployed-contract",
      operationId: "deployedContractControllerFindAll",
      variables,
    }),
    ({ signal }) =>
      fetchDeployedContractControllerFindAll(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type DeployedContractControllerFindOnePathParams = {
  uuid: string;
};

export type DeployedContractControllerFindOneError =
  Fetcher.ErrorWrapper<undefined>;

export type DeployedContractControllerFindOneVariables = {
  pathParams: DeployedContractControllerFindOnePathParams;
} & Dev3Context["fetcherOptions"];

export const fetchDeployedContractControllerFindOne = (
  variables: DeployedContractControllerFindOneVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    Schemas.DeployedContract,
    DeployedContractControllerFindOneError,
    undefined,
    {},
    {},
    DeployedContractControllerFindOnePathParams
  >({
    url: "/api/v1/deployed-contract/{uuid}",
    method: "get",
    ...variables,
    signal,
  });

export const useDeployedContractControllerFindOne = <
  TData = Schemas.DeployedContract
>(
  variables: DeployedContractControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.DeployedContract,
      DeployedContractControllerFindOneError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useDev3Context(options);
  return reactQuery.useQuery<
    Schemas.DeployedContract,
    DeployedContractControllerFindOneError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/deployed-contract/{uuid}",
      operationId: "deployedContractControllerFindOne",
      variables,
    }),
    ({ signal }) =>
      fetchDeployedContractControllerFindOne(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type DeployedContractControllerUpdatePathParams = {
  uuid: string;
};

export type DeployedContractControllerUpdateError =
  Fetcher.ErrorWrapper<undefined>;

export type DeployedContractControllerUpdateVariables = {
  body: Schemas.UpdateDeployedContractDto;
  pathParams: DeployedContractControllerUpdatePathParams;
} & Dev3Context["fetcherOptions"];

export const fetchDeployedContractControllerUpdate = (
  variables: DeployedContractControllerUpdateVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    Schemas.DeployedContractDto,
    DeployedContractControllerUpdateError,
    Schemas.UpdateDeployedContractDto,
    {},
    {},
    DeployedContractControllerUpdatePathParams
  >({
    url: "/api/v1/deployed-contract/{uuid}",
    method: "patch",
    ...variables,
    signal,
  });

export const useDeployedContractControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.DeployedContractDto,
      DeployedContractControllerUpdateError,
      DeployedContractControllerUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDev3Context();
  return reactQuery.useMutation<
    Schemas.DeployedContractDto,
    DeployedContractControllerUpdateError,
    DeployedContractControllerUpdateVariables
  >(
    (variables: DeployedContractControllerUpdateVariables) =>
      fetchDeployedContractControllerUpdate({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type DeployedContractControllerRemovePathParams = {
  uuid: string;
};

export type DeployedContractControllerRemoveError =
  Fetcher.ErrorWrapper<undefined>;

export type DeployedContractControllerRemoveVariables = {
  pathParams: DeployedContractControllerRemovePathParams;
} & Dev3Context["fetcherOptions"];

export const fetchDeployedContractControllerRemove = (
  variables: DeployedContractControllerRemoveVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    undefined,
    DeployedContractControllerRemoveError,
    undefined,
    {},
    {},
    DeployedContractControllerRemovePathParams
  >({
    url: "/api/v1/deployed-contract/{uuid}",
    method: "delete",
    ...variables,
    signal,
  });

export const useDeployedContractControllerRemove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeployedContractControllerRemoveError,
      DeployedContractControllerRemoveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDev3Context();
  return reactQuery.useMutation<
    undefined,
    DeployedContractControllerRemoveError,
    DeployedContractControllerRemoveVariables
  >(
    (variables: DeployedContractControllerRemoveVariables) =>
      fetchDeployedContractControllerRemove({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type DeployedContractControllerFindByUuidPublicPathParams = {
  uuid: string;
};

export type DeployedContractControllerFindByUuidPublicError =
  Fetcher.ErrorWrapper<undefined>;

export type DeployedContractControllerFindByUuidPublicVariables = {
  pathParams: DeployedContractControllerFindByUuidPublicPathParams;
} & Dev3Context["fetcherOptions"];

export const fetchDeployedContractControllerFindByUuidPublic = (
  variables: DeployedContractControllerFindByUuidPublicVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    Schemas.DeployedContractDto,
    DeployedContractControllerFindByUuidPublicError,
    undefined,
    {},
    {},
    DeployedContractControllerFindByUuidPublicPathParams
  >({
    url: "/api/v1/deployed-contract/public/{uuid}",
    method: "get",
    ...variables,
    signal,
  });

export const useDeployedContractControllerFindByUuidPublic = <
  TData = Schemas.DeployedContractDto
>(
  variables: DeployedContractControllerFindByUuidPublicVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.DeployedContractDto,
      DeployedContractControllerFindByUuidPublicError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useDev3Context(options);
  return reactQuery.useQuery<
    Schemas.DeployedContractDto,
    DeployedContractControllerFindByUuidPublicError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/deployed-contract/public/{uuid}",
      operationId: "deployedContractControllerFindByUuidPublic",
      variables,
    }),
    ({ signal }) =>
      fetchDeployedContractControllerFindByUuidPublic(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TransactionRequestControllerCreateError =
  Fetcher.ErrorWrapper<undefined>;

export type TransactionRequestControllerCreateVariables = {
  body: Schemas.CreateTransactionRequestDto;
} & Dev3Context["fetcherOptions"];

export const fetchTransactionRequestControllerCreate = (
  variables: TransactionRequestControllerCreateVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    Schemas.TransactionRequest,
    TransactionRequestControllerCreateError,
    Schemas.CreateTransactionRequestDto,
    {},
    {},
    {}
  >({
    url: "/api/v1/transaction-request",
    method: "post",
    ...variables,
    signal,
  });

export const useTransactionRequestControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TransactionRequest,
      TransactionRequestControllerCreateError,
      TransactionRequestControllerCreateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDev3Context();
  return reactQuery.useMutation<
    Schemas.TransactionRequest,
    TransactionRequestControllerCreateError,
    TransactionRequestControllerCreateVariables
  >(
    (variables: TransactionRequestControllerCreateVariables) =>
      fetchTransactionRequestControllerCreate({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TransactionRequestControllerFindAllQueryParams = {
  project_id?: string;
  offset?: number;
  limit?: number;
  contractId?: string;
  method?: string;
  status?: "Pending" | "Success" | "Failure";
  type?: "Transaction" | "Payment";
};

export type TransactionRequestControllerFindAllError =
  Fetcher.ErrorWrapper<undefined>;

export type TransactionRequestControllerFindAllResponse = {
  total: number;
  limit: number;
  offset: number;
  count: number;
  results: Schemas.TransactionRequest[];
};

export type TransactionRequestControllerFindAllVariables = {
  queryParams?: TransactionRequestControllerFindAllQueryParams;
} & Dev3Context["fetcherOptions"];

export const fetchTransactionRequestControllerFindAll = (
  variables: TransactionRequestControllerFindAllVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    TransactionRequestControllerFindAllResponse,
    TransactionRequestControllerFindAllError,
    undefined,
    {},
    TransactionRequestControllerFindAllQueryParams,
    {}
  >({
    url: "/api/v1/transaction-request",
    method: "get",
    ...variables,
    signal,
  });

export const useTransactionRequestControllerFindAll = <
  TData = TransactionRequestControllerFindAllResponse
>(
  variables: TransactionRequestControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TransactionRequestControllerFindAllResponse,
      TransactionRequestControllerFindAllError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useDev3Context(options);
  return reactQuery.useQuery<
    TransactionRequestControllerFindAllResponse,
    TransactionRequestControllerFindAllError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/transaction-request",
      operationId: "transactionRequestControllerFindAll",
      variables,
    }),
    ({ signal }) =>
      fetchTransactionRequestControllerFindAll(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TransactionRequestControllerFindByUuidPathParams = {
  uuid: string;
};

export type TransactionRequestControllerFindByUuidError =
  Fetcher.ErrorWrapper<undefined>;

export type TransactionRequestControllerFindByUuidVariables = {
  pathParams: TransactionRequestControllerFindByUuidPathParams;
} & Dev3Context["fetcherOptions"];

export const fetchTransactionRequestControllerFindByUuid = (
  variables: TransactionRequestControllerFindByUuidVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    Schemas.PublicTransactionRequestDto,
    TransactionRequestControllerFindByUuidError,
    undefined,
    {},
    {},
    TransactionRequestControllerFindByUuidPathParams
  >({
    url: "/api/v1/transaction-request/uuid/{uuid}",
    method: "get",
    ...variables,
    signal,
  });

export const useTransactionRequestControllerFindByUuid = <
  TData = Schemas.PublicTransactionRequestDto
>(
  variables: TransactionRequestControllerFindByUuidVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PublicTransactionRequestDto,
      TransactionRequestControllerFindByUuidError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useDev3Context(options);
  return reactQuery.useQuery<
    Schemas.PublicTransactionRequestDto,
    TransactionRequestControllerFindByUuidError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/transaction-request/uuid/{uuid}",
      operationId: "transactionRequestControllerFindByUuid",
      variables,
    }),
    ({ signal }) =>
      fetchTransactionRequestControllerFindByUuid(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TransactionRequestControllerUpdatePathParams = {
  uuid: string;
};

export type TransactionRequestControllerUpdateError =
  Fetcher.ErrorWrapper<undefined>;

export type TransactionRequestControllerUpdateVariables = {
  body: Schemas.UpdateTransactionRequestDto;
  pathParams: TransactionRequestControllerUpdatePathParams;
} & Dev3Context["fetcherOptions"];

export const fetchTransactionRequestControllerUpdate = (
  variables: TransactionRequestControllerUpdateVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    Schemas.TransactionRequestDto,
    TransactionRequestControllerUpdateError,
    Schemas.UpdateTransactionRequestDto,
    {},
    {},
    TransactionRequestControllerUpdatePathParams
  >({
    url: "/api/v1/transaction-request/{uuid}",
    method: "patch",
    ...variables,
    signal,
  });

export const useTransactionRequestControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TransactionRequestDto,
      TransactionRequestControllerUpdateError,
      TransactionRequestControllerUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDev3Context();
  return reactQuery.useMutation<
    Schemas.TransactionRequestDto,
    TransactionRequestControllerUpdateError,
    TransactionRequestControllerUpdateVariables
  >(
    (variables: TransactionRequestControllerUpdateVariables) =>
      fetchTransactionRequestControllerUpdate({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type FileControllerUploadFileError = Fetcher.ErrorWrapper<undefined>;

export type FileControllerUploadFileVariables = {
  body: Schemas.FileUploadDto;
} & Dev3Context["fetcherOptions"];

export const fetchFileControllerUploadFile = (
  variables: FileControllerUploadFileVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    Schemas.File,
    FileControllerUploadFileError,
    Schemas.FileUploadDto,
    {},
    {},
    {}
  >({ url: "/api/v1/file", method: "post", ...variables, signal });

export const useFileControllerUploadFile = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.File,
      FileControllerUploadFileError,
      FileControllerUploadFileVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDev3Context();
  return reactQuery.useMutation<
    Schemas.File,
    FileControllerUploadFileError,
    FileControllerUploadFileVariables
  >(
    (variables: FileControllerUploadFileVariables) =>
      fetchFileControllerUploadFile({ ...fetcherOptions, ...variables }),
    options
  );
};

export type FileControllerUpdateFilePathParams = {
  id: string;
};

export type FileControllerUpdateFileError = Fetcher.ErrorWrapper<undefined>;

export type FileControllerUpdateFileVariables = {
  body: Schemas.FileUploadDto;
  pathParams: FileControllerUpdateFilePathParams;
} & Dev3Context["fetcherOptions"];

export const fetchFileControllerUpdateFile = (
  variables: FileControllerUpdateFileVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    Schemas.File,
    FileControllerUpdateFileError,
    Schemas.FileUploadDto,
    {},
    {},
    FileControllerUpdateFilePathParams
  >({ url: "/api/v1/file/{id}", method: "patch", ...variables, signal });

export const useFileControllerUpdateFile = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.File,
      FileControllerUpdateFileError,
      FileControllerUpdateFileVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDev3Context();
  return reactQuery.useMutation<
    Schemas.File,
    FileControllerUpdateFileError,
    FileControllerUpdateFileVariables
  >(
    (variables: FileControllerUpdateFileVariables) =>
      fetchFileControllerUpdateFile({ ...fetcherOptions, ...variables }),
    options
  );
};

export type QueryOperation =
  | {
      path: "/api/v1/project";
      operationId: "projectControllerFindAll";
      variables: ProjectControllerFindAllVariables;
    }
  | {
      path: "/api/v1/project/{id}";
      operationId: "projectControllerFindById";
      variables: ProjectControllerFindByIdVariables;
    }
  | {
      path: "/api/v1/project/slug/{slug}";
      operationId: "projectControllerFindBySlug";
      variables: ProjectControllerFindBySlugVariables;
    }
  | {
      path: "/api/v1/user/me";
      operationId: "userControllerFindMe";
      variables: UserControllerFindMeVariables;
    }
  | {
      path: "/api/v1/api-key";
      operationId: "apiKeyControllerFindAll";
      variables: ApiKeyControllerFindAllVariables;
    }
  | {
      path: "/api/v1/api-key/{projectId}";
      operationId: "apiKeyControllerFindOne";
      variables: ApiKeyControllerFindOneVariables;
    }
  | {
      path: "/api/v1/api-key/is-valid/{apiKey}";
      operationId: "apiKeyControllerIsValid";
      variables: ApiKeyControllerIsValidVariables;
    }
  | {
      path: "/api/v1/address";
      operationId: "addressControllerFindAll";
      variables: AddressControllerFindAllVariables;
    }
  | {
      path: "/api/v1/address/{id}";
      operationId: "addressControllerFindOne";
      variables: AddressControllerFindOneVariables;
    }
  | {
      path: "/api/v1/contract-template";
      operationId: "contractControllerFindAll";
      variables: ContractControllerFindAllVariables;
    }
  | {
      path: "/api/v1/deployed-contract";
      operationId: "deployedContractControllerFindAll";
      variables: DeployedContractControllerFindAllVariables;
    }
  | {
      path: "/api/v1/deployed-contract/{uuid}";
      operationId: "deployedContractControllerFindOne";
      variables: DeployedContractControllerFindOneVariables;
    }
  | {
      path: "/api/v1/deployed-contract/public/{uuid}";
      operationId: "deployedContractControllerFindByUuidPublic";
      variables: DeployedContractControllerFindByUuidPublicVariables;
    }
  | {
      path: "/api/v1/transaction-request";
      operationId: "transactionRequestControllerFindAll";
      variables: TransactionRequestControllerFindAllVariables;
    }
  | {
      path: "/api/v1/transaction-request/uuid/{uuid}";
      operationId: "transactionRequestControllerFindByUuid";
      variables: TransactionRequestControllerFindByUuidVariables;
    };
